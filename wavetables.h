// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

#include <stdint.h>
#include <avr/pgmspace.h>
#define WAVETABLE_LENGTH 256
#define MAPTABLE_LENGTH 1024


// 1V/octave lookup table - the values are phase increments. Base frequency is
// approximately 30Hz.
const uint16_t freqTable[MAPTABLE_LENGTH] PROGMEM = {
63,64,64,64,64,65,65,65,65,65,66,66,66,66,66,67,67,
67,67,68,68,68,68,69,69,69,69,69,70,70,70,70,71,
71,71,71,72,72,72,72,73,73,73,73,74,74,74,74,75,
75,75,75,76,76,76,76,77,77,77,77,78,78,78,78,79,
79,79,80,80,80,80,81,81,81,81,82,82,82,83,83,83,
83,84,84,84,85,85,85,85,86,86,86,87,87,87,87,88,
88,88,89,89,89,90,90,90,90,91,91,91,92,92,92,93,
93,93,94,94,94,95,95,95,96,96,96,96,97,97,97,98,
98,98,99,99,99,100,100,100,101,101,102,102,102,103,103,103,
104,104,104,105,105,105,106,106,106,107,107,108,108,108,109,109,
109,110,110,110,111,111,112,112,112,113,113,114,114,114,115,115,
115,116,116,117,117,117,118,118,119,119,119,120,120,121,121,121,
122,122,123,123,124,124,124,125,125,126,126,126,127,127,128,128,
129,129,130,130,130,131,131,132,132,133,133,134,134,134,135,135,
136,136,137,137,138,138,139,139,140,140,140,141,141,142,142,143,
143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,
151,152,152,153,153,154,154,155,155,156,157,157,158,158,159,159,
160,160,161,161,162,162,163,164,164,165,165,166,166,167,168,168,
169,169,170,170,171,172,172,173,173,174,174,175,176,176,177,177,
178,179,179,180,180,181,182,182,183,184,184,185,185,186,187,187,
188,189,189,190,191,191,192,192,193,194,194,195,196,196,197,198,
198,199,200,200,201,202,202,203,204,205,205,206,207,207,208,209,
209,210,211,212,212,213,214,214,215,216,217,217,218,219,220,220,
221,222,223,223,224,225,226,226,227,228,229,229,230,231,232,233,
233,234,235,236,237,237,238,239,240,241,241,242,243,244,245,246,
246,247,248,249,250,251,251,252,253,254,255,256,257,257,258,259,
260,261,262,263,264,265,265,266,267,268,269,270,271,272,273,274,
275,276,276,277,278,279,280,281,282,283,284,285,286,287,288,289,
290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,
306,307,308,309,310,311,312,313,314,315,317,318,319,320,321,322,
323,324,325,326,327,329,330,331,332,333,334,335,336,338,339,340,
341,342,343,344,346,347,348,349,350,352,353,354,355,356,358,359,
360,361,362,364,365,366,367,369,370,371,372,374,375,376,377,379,
380,381,383,384,385,386,388,389,390,392,393,394,396,397,398,400,
401,402,404,405,407,408,409,411,412,414,415,416,418,419,421,422,
423,425,426,428,429,431,432,434,435,437,438,440,441,443,444,446,
447,449,450,452,453,455,456,458,459,461,462,464,466,467,469,470,
472,473,475,477,478,480,482,483,485,486,488,490,491,493,495,496,
498,500,502,503,505,507,508,510,512,514,515,517,519,521,522,524,
526,528,529,531,533,535,537,538,540,542,544,546,548,550,551,553,
555,557,559,561,563,565,567,568,570,572,574,576,578,580,582,584,
586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,617,
619,621,623,625,627,629,631,633,636,638,640,642,644,646,649,651,
653,655,658,660,662,664,666,669,671,673,676,678,680,682,685,687,
689,692,694,696,699,701,704,706,708,711,713,716,718,720,723,725,
728,730,733,735,738,740,743,745,748,750,753,755,758,761,763,766,
768,771,773,776,779,781,784,787,789,792,795,797,800,803,806,808,
811,814,817,819,822,825,828,830,833,836,839,842,845,847,850,853,
856,859,862,865,868,871,874,877,880,883,886,889,892,895,898,901,
904,907,910,913,916,919,922,925,929,932,935,938,941,944,948,951,
954,957,961,964,967,970,974,977,980,984,987,990,994,997,1000,1004,
1007,1011,1014,1017,1021,1024,1028,1031,1035,1038,1042,1045,1049,1052,1056,1060,
1063,1067,1070,1074,1078,1081,1085,1089,1092,1096,1100,1104,1107,1111,1115,1119,
1122,1126,1130,1134,1138,1142,1145,1149,1153,1157,1161,1165,1169,1173,1177,1181,
1185,1189,1193,1197,1201,1205,1209,1213,1217,1221,1226,1230,1234,1238,1242,1247,
1251,1255,1259,1264,1268,1272,1276,1281,1285,1289,1294,1298,1303,1307,1311,1316,
1320,1325,1329,1334,1338,1343,1347,1352,1357,1361,1366,1370,1375,1380,1384,1389,
1394,1399,1403,1408,1413,1418,1422,1427,1432,1437,1442,1447,1452,1457,1461,1466,
1471,1476,1481,1486,1491,1496,1502,1507,1512,1517,1522,1527,1532,1538,1543,1548,
1553,1559,1564,1569,1574,1580,1585,1590,1596,1601,1607,1612,1618,1623,1629,1634,
1640,1645,1651,1656,1662,1668,1673,1679,1685,1690,1696,1702,1708,1713,1719,1725,
1731,1737,1743,1749,1755,1760,1766,1772,1778,1784,1791,1797,1803,1809,1815,1821,
1827,1833,1840,1846,1852,1858,1865,1871,1877,1884,1890,1897,1903,1909,1916,1922,
1929,1935,1942,1949,1955,1962,1968,1975,1982,1989,1995,2002,2009,2016,2023
};

// Output waveform/voltage mapping - mostly linear, although the digital
// noise output is confined to the top-end of the scale (pot fully CW)
const uint16_t oscTable[MAPTABLE_LENGTH] PROGMEM = {
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
};

// Convenience functions to map voltages to values
uint16_t mapFreq(uint16_t input) {
  return pgm_read_word_near(freqTable + input);
}

uint16_t mapOsc(uint16_t input) {
  return pgm_read_word_near(oscTable + input);
}

//uint16_t mapFineTune(uint16_t input) {
//  return pgm_read_word_near(finetune_table + input);
//}

// 256-byte wavetables for each of the waveforms we want to output - the 
// wavetable corresponds to one complete cycle of the waveform of interest.

// Digital 'noise' (really, just random values)
const uint8_t noise[WAVETABLE_LENGTH] PROGMEM = {
  0xc6,0x92,0x50,0xac,0x18,0x41,0xd,0x8f,0xc0,0x86,0x8d,0x80,0x50,0x27,0x63,0x67,
  0x9c,0x1f,0xf6,0x18,0xf4,0x57,0x49,0xc0,0xfb,0xab,0x18,0x92,0xd3,0x1c,0x49,0x38,
  0x14,0xbb,0xa9,0xe8,0xa,0x60,0xa2,0x99,0xda,0x4,0x3,0x55,0x5,0x24,0x3f,0x41,0x1f,
  0xe,0xfc,0x8b,0x65,0x6b,0x25,0xec,0x9d,0xd0,0xa5,0x47,0xd0,0xcf,0x73,0x3,0xcc,
  0x35,0x40,0xe,0x95,0xcf,0xbb,0xf2,0x4d,0x75,0xef,0xae,0x5f,0x9f,0x4a,0x5,0x9d,
  0x6f,0xc6,0xbb,0x41,0x46,0xc8,0x5e,0xa9,0x2c,0x67,0x20,0xf6,0x93,0xbe,0x39,0x58,
  0x85,0xd3,0x45,0x8e,0x5a,0x61,0x9e,0xba,0x43,0x1d,0xcc,0xfa,0xe8,0x1d,0xe3,0x3b,
  0x8f,0xf,0x66,0xba,0xc4,0xb4,0x12,0x7b,0x7e,0x88,0x96,0xb5,0x41,0x32,0x66,0x8f,
  0x94,0xfa,0x9d,0x64,0x50,0x1,0x9d,0xc8,0x7d,0xd0,0x64,0x31,0x9c,0xac,0xf0,0x3b,
  0xea,0x6c,0x54,0xe4,0x44,0x73,0xdc,0xc4,0x52,0xd8,0xe2,0x46,0xaf,0xaf,0x10,0x8b,
  0x42,0xf8,0xa4,0xf3,0x16,0x8f,0x3e,0xef,0xc4,0x3a,0x37,0x95,0xa2,0x2f,0xc9,0xf8,
  0xc,0xa7,0x22,0xad,0xd4,0x4e,0x47,0x9,0xc,0x0,0x1f,0x6,0x86,0x0,0xd7,0xb8,0x1c,
  0xe2,0x3,0x73,0x71,0x64,0x35,0x30,0x69,0x37,0x4b,0x97,0xeb,0x52,0xfd,0x59,0x19,
  0x47,0x74,0x93,0x26,0xe7,0x2b,0x96,0xc2,0x5a,0xa6,0x88,0x5b,0xd6,0xdc,0x95,0x49,
  0xb6,0x7e,0xf6,0x49,0x5,0xf2,0x9b,0x63,0x25,0xbc,0xf,0x0,0x7d,0x76,0x24,0x38,
  0x44,0xe0,0xc3,0x3a,0x75,0x54,0xcc,0x6,0x8f,0x43,0xce,0xe6,0xb1 };

// 50% duty square wave
//const uint8_t sqr5050[WAVETABLE_LENGTH] PROGMEM = {
//  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
//  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
//  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
//  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
//  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
//  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
//  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
//  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
//  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
//};

// Something pulse-ish
const uint8_t pulse[WAVETABLE_LENGTH] PROGMEM = {
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,
  0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

// Triangle
const uint8_t triangle[WAVETABLE_LENGTH] PROGMEM = {
    0x2,0x4,0x6,0x8,0xa,0xc,0xe,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x20,
    0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,0x40,
    0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,0x60,
    0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,0x80,
    0x81,0x83,0x85,0x87,0x89,0x8b,0x8d,0x8f,0x91,0x93,0x95,0x97,0x99,0x9b,0x9d,0x9f,
    0xa1,0xa3,0xa5,0xa7,0xa9,0xab,0xad,0xaf,0xb1,0xb3,0xb5,0xb7,0xb9,0xbb,0xbd,0xbf,
    0xc1,0xc3,0xc5,0xc7,0xc9,0xcb,0xcd,0xcf,0xd1,0xd3,0xd5,0xd7,0xd9,0xdb,0xdd,0xdf,
    0xe1,0xe3,0xe5,0xe7,0xe9,0xeb,0xed,0xef,0xf1,0xf3,0xf5,0xf7,0xf9,0xfb,0xfd,0xff,
    0xfd,0xfb,0xf9,0xf7,0xf5,0xf3,0xf1,0xef,0xed,0xeb,0xe9,0xe7,0xe5,0xe3,0xe1,0xdf,
    0xdd,0xdb,0xd9,0xd7,0xd5,0xd3,0xd1,0xcf,0xcd,0xcb,0xc9,0xc7,0xc5,0xc3,0xc1,0xbf,
    0xbd,0xbb,0xb9,0xb7,0xb5,0xb3,0xb1,0xaf,0xad,0xab,0xa9,0xa7,0xa5,0xa3,0xa1,0x9f,
    0x9d,0x9b,0x99,0x97,0x95,0x93,0x91,0x8f,0x8d,0x8b,0x89,0x87,0x85,0x83,0x81,0x80,
    0x7e,0x7c,0x7a,0x78,0x76,0x74,0x72,0x70,0x6e,0x6c,0x6a,0x68,0x66,0x64,0x62,0x60,
    0x5e,0x5c,0x5a,0x58,0x56,0x54,0x52,0x50,0x4e,0x4c,0x4a,0x48,0x46,0x44,0x42,0x40,
    0x3e,0x3c,0x3a,0x38,0x36,0x34,0x32,0x30,0x2e,0x2c,0x2a,0x28,0x26,0x24,0x22,0x20,
    0x1e,0x1c,0x1a,0x18,0x16,0x14,0x12,0x10,0xe,0xc,0xa,0x8,0x6,0x4,0x2,0x0
  };

// Sine
const uint8_t sine[WAVETABLE_LENGTH] PROGMEM = {
    0x80,0x83,0x86,0x89,0x8c,0x8f,0x92,0x95,0x98,0x9b,0x9e,0xa2,0xa5,0xa7,0xaa,0xad,
    0xb0,0xb3,0xb6,0xb9,0xbc,0xbe,0xc1,0xc4,0xc6,0xc9,0xcb,0xce,0xd0,0xd3,0xd5,0xd7,
    0xda,0xdc,0xde,0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xeb,0xed,0xee,0xf0,0xf1,0xf3,0xf4,
    0xf5,0xf6,0xf8,0xf9,0xfa,0xfa,0xfb,0xfc,0xfd,0xfd,0xfe,0xfe,0xfe,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xfe,0xfe,0xfe,0xfd,0xfd,0xfc,0xfb,0xfa,0xfa,0xf9,0xf8,0xf6,
    0xf5,0xf4,0xf3,0xf1,0xf0,0xee,0xed,0xeb,0xea,0xe8,0xe6,0xe4,0xe2,0xe0,0xde,0xdc,
    0xda,0xd7,0xd5,0xd3,0xd0,0xce,0xcb,0xc9,0xc6,0xc4,0xc1,0xbe,0xbc,0xb9,0xb6,0xb3,
    0xb0,0xad,0xaa,0xa7,0xa5,0xa2,0x9e,0x9b,0x98,0x95,0x92,0x8f,0x8c,0x89,0x86,0x83,
    0x80,0x7c,0x79,0x76,0x73,0x70,0x6d,0x6a,0x67,0x64,0x61,0x5d,0x5a,0x58,0x55,0x52,
    0x4f,0x4c,0x49,0x46,0x43,0x41,0x3e,0x3b,0x39,0x36,0x34,0x31,0x2f,0x2c,0x2a,0x28,
    0x25,0x23,0x21,0x1f,0x1d,0x1b,0x19,0x17,0x15,0x14,0x12,0x11,0xf,0xe,0xc,0xb,
    0xa,0x9,0x7,0x6,0x5,0x5,0x4,0x3,0x2,0x2,0x1,0x1,0x1,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x2,0x2,0x3,0x4,0x5,0x5,0x6,0x7,0x9,
    0xa,0xb,0xc,0xe,0xf,0x11,0x12,0x14,0x15,0x17,0x19,0x1b,0x1d,0x1f,0x21,0x23,
    0x25,0x28,0x2a,0x2c,0x2f,0x31,0x34,0x36,0x39,0x3b,0x3e,0x41,0x43,0x46,0x49,0x4c,
    0x4f,0x52,0x55,0x58,0x5a,0x5d,0x61,0x64,0x67,0x6a,0x6d,0x70,0x73,0x76,0x79,0x7c

};
